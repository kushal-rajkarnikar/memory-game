{"version":3,"sources":["components/memoryblock.jsx","App.js","serviceWorker.js","index.js"],"names":["MemoryBlock","state","status","_this","props","flipCard","idofCard","setState","this","_this2","react_default","a","createElement","className","onClick","id","getClass","index_es","icon","Component","library","add","fas","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","memoryBlocks","toConsumableArray","pair","length","push","setTimeout","every","currentMemoryBlock","alert","map","memoryBlock","shift","_this$state","memoryblock","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab795e6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nclass MemoryBlock extends Component {\r\n\r\n    state = {\r\n        status: this.props.status,\r\n    }\r\n\r\n    getClass (){\r\n        \r\n        if (this.props.status === \"front\") {\r\n            return \"card\"\r\n        }\r\n        else if (this.props.status === \"back\") {\r\n            return \"card is-flipped\"\r\n        }\r\n        else if (this.props.status === \"matched\") {\r\n            return \"card matched\"\r\n        }\r\n    }\r\n\r\n    flipCard = (idofCard) => {\r\n      \r\n        this.props.flipCard(idofCard);\r\n\r\n\r\n        if (this.state.status === \"front\") {\r\n            let status = \"back\";\r\n            this.setState({ status });                   \r\n        }\r\n        else {\r\n            let status = \"front\";\r\n            this.setState({ status });            \r\n        }\r\n    }\r\n     \r\n  render() {\r\n    return (\r\n\r\n        <div className=\"scene scene--card\">\r\n            <div onClick={()=>this.flipCard(this.props.id)} className={this.getClass()}>\r\n                <div className=\"card__face card__face--front\">\r\n                <FontAwesomeIcon icon={this.props.icon} />\r\n                </div>\r\n                <div className=\"card__face card__face--back\">\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MemoryBlock;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MemoryBlock from './components/memoryblock';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(fas)\r\n\r\nclass App extends Component {\r\n\r\n  constructor (props){\r\n    \r\n    super(props);\r\n    this.state = {\r\n      pair: [],      \r\n      memoryBlocks: [\r\n        { id: 1, status: \"back\", icon: \"bicycle\" },\r\n        { id: 2, status: \"back\", icon: \"battery-quarter\" },\r\n        { id: 3, status: \"back\", icon: \"anchor\" },\r\n        { id: 4, status: \"back\", icon: \"anchor\" },\r\n        { id: 5, status: \"back\", icon: \"atom\" },\r\n        { id: 6, status: \"back\", icon: \"battery-quarter\" },\r\n        { id: 7, status: \"back\", icon: \"bicycle\" },\r\n        { id: 8, status: \"back\", icon: \"atom\" },\r\n      ]\r\n    }\r\n  }\r\n\r\n flipCard = (idofCard) =>{\r\n   \r\n     \r\n  const memoryBlocks = [...this.state.memoryBlocks];\r\n\r\n\r\n\r\n  \r\n     if (this.state.memoryBlocks[idofCard - 1].status === \"front\") {\r\n      memoryBlocks[idofCard - 1].status = \"back\";   \r\n   }\r\n   else {\r\n     memoryBlocks[idofCard - 1].status = \"front\";\r\n   }\r\n     \r\n   \r\n   if (this.state.pair.length < 2) {\r\n     let pair = this.state.pair;\r\n\r\n     pair.push(idofCard)\r\n     \r\n     this.setState({ pair: pair }); \r\n\r\n     if (this.state.pair.length === 2){\r\n\r\n      if (memoryBlocks[this.state.pair[0] - 1] != memoryBlocks[this.state.pair[1] - 1]){\r\n\r\n      let memoryBlocks = this.state.memoryBlocks;\r\n\r\n      if (this.state.memoryBlocks[this.state.pair[0] - 1].icon === this.state.memoryBlocks[this.state.pair[1] - 1].icon){        \r\n        setTimeout(() => {\r\n          memoryBlocks[this.state.pair[0] - 1].status = \"matched\";\r\n          memoryBlocks[this.state.pair[1] - 1].status = \"matched\";\r\n          let pair = this.state.pair;\r\n          pair.length = 0;\r\n          this.setState({pair});  \r\n\r\n          let gameOver = memoryBlocks.every(areAllBlocksMatched);\r\n\r\n          function areAllBlocksMatched(currentMemoryBlock){\r\n            return currentMemoryBlock.status === \"matched\";\r\n          }\r\n\r\n          if (gameOver){\r\n            setTimeout(() => {\r\n            alert(\"Game Over\");\r\n            }, 100)\r\n          }\r\n        \r\n        },1000)\r\n        \r\n      }\r\n    }\r\n    }\r\n     \r\n    //  if (this.state.pair[0] === this.state.pair[1]){\r\n    //   memoryBlocks[this.state.pair[0] - 1].\r\n    //  }\r\n     \r\n   }\r\n   \r\n   else {\r\n\r\n  \r\n    \r\n     let memoryBlocks = this.state.memoryBlocks;\r\n     memoryBlocks.map(memoryBlock=>{\r\n        if (memoryBlock.status!=\"matched\"){\r\n            memoryBlock.status = \"back\"\r\n        }\r\n      }\r\n       \r\n    );\r\n\r\n    memoryBlocks[idofCard - 1].status = \"front\";\r\n    \r\n\r\n      \r\n    \r\n     let pair = this.state.pair;\r\n     pair.shift();\r\n     pair.shift();\r\n     pair.push(idofCard);\r\n\r\n  \r\n     this.setState({memoryBlocks, pair});        \r\n     \r\n   }\r\n\r\n   this.setState({ memoryBlocks });\r\n\r\n   \r\n    \r\n }\r\n\r\n  \r\n  render() {\r\n\r\n    const { memoryBlocks, pair} = this.state;\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"canvas\">\r\n\r\n        {memoryBlocks.map(memoryBlock=>\r\n            <MemoryBlock memoryBlocks={memoryBlocks} id={memoryBlock.id} status={memoryBlock.status} key={memoryBlock.id} pair={pair} flipCard={this.flipCard} icon={memoryBlock.icon}/>\r\n        )}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}